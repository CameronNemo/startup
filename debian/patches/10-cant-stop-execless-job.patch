=== modified file 'init/job.c'
--- init/job.c	2007-02-10 16:49:17 +0000
+++ init/job.c	2007-02-11 18:11:14 +0000
@@ -558,7 +558,7 @@
 
 		break;
 	case JOB_STOP:
-		if ((job->state == JOB_RUNNING) && (job->pid > 0))
+		if (job->state == JOB_RUNNING)
 			job_change_state (job, job_next_state (job));
 
 		break;
@@ -1463,12 +1463,17 @@
 		}
 	}
 
-	/* Change the goal to stop.  Since at this point we have no process
-	 * and are not in the waiting state, there will be no unexpected
-	 * side-effects.
+	/* Change the goal to stop; normally this doesn't have any
+	 * side-effects, except when we're in the RUNNING state when it'll
+	 * change the state as well.  We obviously don't want to change the
+	 * state twice.
 	 */
-	if (stop)
+	if (stop) {
+		if (job->state == JOB_RUNNING)
+			state = FALSE;
+
 		job_change_goal (job, JOB_STOP, job->cause);
+	}
 
 	if (state)
 		job_change_state (job, job_next_state (job));

=== modified file 'init/tests/test_job.c'
--- init/tests/test_job.c	2007-02-10 16:49:17 +0000
+++ init/tests/test_job.c	2007-02-11 18:18:10 +0000
@@ -750,7 +750,7 @@
 	/* Check that an attempt to start a job that's running and still
 	 * with a start goal does nothing.
 	 */
-	TEST_FEATURE ("with running job");
+	TEST_FEATURE ("with running job and start");
 	TEST_ALLOC_FAIL {
 		job->goal = JOB_START;
 		job->state = JOB_RUNNING;
@@ -767,7 +767,7 @@
 	/* Check that an attempt to stop a running job results in the goal
 	 * and the state being changed.
 	 */
-	TEST_FEATURE ("with running job");
+	TEST_FEATURE ("with running job and stop");
 	TEST_ALLOC_FAIL {
 		job->goal = JOB_START;
 		job->state = JOB_RUNNING;
@@ -781,10 +781,10 @@
 	}
 
 
-	/* Check that an attempt to stop a running job withoug any process
-	 * only results in the goal being changed.
+	/* Check that an attempt to stop a running job without any process
+	 * also results in the state being changed.
 	 */
-	TEST_FEATURE ("with running job");
+	TEST_FEATURE ("with running job and no process");
 	TEST_ALLOC_FAIL {
 		job->goal = JOB_START;
 		job->state = JOB_RUNNING;
@@ -793,7 +793,7 @@
 		job_change_goal (job, JOB_STOP, NULL);
 
 		TEST_EQ (job->goal, JOB_STOP);
-		TEST_EQ (job->state, JOB_RUNNING);
+		TEST_EQ (job->state, JOB_STOPPING);
 		TEST_EQ (job->pid, 0);
 	}
 

