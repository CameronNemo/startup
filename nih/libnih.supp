# This is a valgrind suppressions file.

# There is a slight overhead to using some parts of libnih in the form
# of a heap-allocated list head used to link all allocated structures
# by that component.
#
# They are allocated the first time that part of libnih is used by the
# static nih_*_init function; valgrind complains because they are not
# freed before exit, as there's little point to doing so.

{
   nih-child-init
   Memcheck:Leak
   fun:malloc
   fun:realloc
   fun:nih_alloc_using
   fun:nih_alloc
   fun:nih_list_new
   fun:nih_child_init
}

{
   nih-error-init
   Memcheck:Leak
   fun:malloc
   fun:realloc
   fun:nih_alloc_using
   fun:nih_alloc
   fun:nih_list_new
   fun:nih_error_init
}

{
   nih-file-init
   Memcheck:Leak
   fun:malloc
   fun:realloc
   fun:nih_alloc_using
   fun:nih_alloc
   fun:nih_list_new
   fun:nih_file_init
}

{
   nih-io-init
   Memcheck:Leak
   fun:malloc
   fun:realloc
   fun:nih_alloc_using
   fun:nih_alloc
   fun:nih_list_new
   fun:nih_io_init
}

{
   nih-signal-init
   Memcheck:Leak
   fun:malloc
   fun:realloc
   fun:nih_alloc_using
   fun:nih_alloc
   fun:nih_list_new
   fun:nih_signal_init
}

{
   nih-timer-init
   Memcheck:Leak
   fun:malloc
   fun:realloc
   fun:nih_alloc_using
   fun:nih_alloc
   fun:nih_list_new
   fun:nih_timer_init
}


# nih_main_package_string stores the generated string in a
# heap-allocated pointer.  It survives the life of the process and
# is only not freed because there's little point in doing so.

{
   nih-main-package-string
   Memcheck:Leak
   fun:malloc
   fun:realloc
   fun:nih_alloc_using
   fun:nih_alloc
   fun:nih_vsprintf
   fun:nih_sprintf
   fun:nih_main_package_string
}

# tmpfile is used by some test cases ... valgrind doesn't have a built-in
# suppression for it.
{
   glibc-tmpfile
   Memcheck:Leak
   fun:malloc
   fun:fdopen
   fun:tmpfile
}
