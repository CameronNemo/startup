Code Cleanup:

 * cfg_watch_dir needs testing


High Priority:

 * Serialisation is turning out to be quite a tricky topic.  We're not
   serialising subscriptions, the outgoing message queue, event emission
   callbacks, etc.  There must be a better way of doing this!

 * Re-exec'ing init will disconnect anything on the control socket.

 * sort out the message types into groups, etc.

 * When spawning a process, keep a pipe open (but mark it FD_CLOEXEC); if
   we encounter any problems write the error code to this pipe and die.
   Then from above, we can read this pipe to determine whether the job
   failed before or after the exec.  (Might be a cleaner way to do this).

 * Configuration files can be deleted, need to do something with the
   job at that point (stop it and delete it)

 * If environment variables don't have an = in them, copy that variable
   from init's environment (default PATH, TERM)

 * putenv/setenv is quite undesirable, in fact, process_setup_environment
   is just getting messy!


Medium Priority:

 * Iterating through every Job's start and stop events is messy; we should
   have some kind of match lookup table to make it easier.

 * The jobs list should be a hash table.

 * If we can't KILL things, we shouldn't ignore that, we should treat
   that as a failure and adjust the job again so it still shows up as
   running

 * force option?  ensures things are KILLed and failure to KILL
   ignored?

 * we may need to KILL scripts, e.g. post-start

 * scripts should also have a timeout


Low Priority:

 * replace logd raise/wait/kill interlock with a pipe-based one?

 * replace logd with something else that's more standard in the system,
   and just use a normal API to communicate with it.


Unfinished Features:

 * Handle locating the pid for a spawned daemon, use an inotify watch
   on the pid file or scan /proc.

 * Deal with instances, spawning and freeing of them.  Will need to be
   hooked into job_find_by_name so that provides only the parent, and
   another way to find other instances.  job_find_other_instance ()
   which takes an existing job, iterates for the same name?

 * Get the LANG environment variable somehow.


Future Features:

 * Per-user services; will need to use PAM to set up the session.
   We want to do this for "root-user services" but not for jobs/tasks

 * Passing of environment and file descriptors from event over control
   socket.

 * Register services over the control socket.

 * Temporal events ("15m after startup")

 * Scheduled times ("every day at 3:00")

 * Load average checking, maybe have separate CPU, Network and I/O
   stats?

 * Actions: "reload" and optional replacements for "stop", "start", etc.
